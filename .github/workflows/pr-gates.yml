name: PR Gates

on:
  pull_request_target:
    types:
      - opened
      - edited
      - synchronize

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  pr-label:
    name: label pr
    runs-on: ubuntu-latest
    steps:
      # Custom label logic to avoid unnecessary remove/add cycles when label unchanged
      - name: apply conventional commit label (idempotent)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.info('No pull_request in context, skipping');
              return;
            }
            const title = pr.title.trim();
            // Extract type before first '(' or ':'
            const typeSegment = title.split(':')[0];
            const rawType = (typeSegment.includes('(') ? typeSegment.split('(')[0] : typeSegment).trim();
            const type = rawType.toLowerCase();
            const ignored = new Set(['chore','style','revert']);
            if (ignored.has(type)) {
              core.info(`Type "${type}" is ignored; no labeling.`);
              return;
            }
            const typeMap = {
              feat: 'feature',
              fix: 'fix',
              perf: 'performance',
              refactor: 'refactor',
              docs: 'documentation',
              breaking: 'breaking',
              test: 'test',
              ci: 'ci',
              build: 'ci'
            };
            const desired = typeMap[type];
            if (!desired) {
              core.info(`No mapped label for type "${type}"; skipping.`);
              return;
            }
            const managedLabels = Array.from(new Set(Object.values(typeMap))); // unique set
            const { data: current } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });
            const existing = current.labels.map(l => typeof l === 'string' ? l : l.name);
            const hasDesired = existing.includes(desired);
            const extraneous = existing.filter(l => managedLabels.includes(l) && l !== desired);
            if (hasDesired && extraneous.length === 0) {
              core.info(`Label "${desired}" already present and no other managed labels to adjust.`);
              return; // idempotent - nothing to change
            }
            // Remove extraneous managed labels
            for (const label of extraneous) {
              core.info(`Removing extraneous label ${label}`);
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: label,
                });
              } catch (e) {
                core.warning(`Failed to remove label ${label}: ${e.message}`);
              }
            }
            if (!hasDesired) {
              core.info(`Adding label ${desired}`);
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: [desired],
              });
            } else {
              core.info(`Desired label "${desired}" already present after cleanup.`);
            }

  pr-title-lint:
    name: lint pr title
    runs-on: ubuntu-24.04
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        id: lint_pr_title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            build
            chore
            ci
            docs
            feat
            fix
            perf
            refactor
            revert
            style
            test
          scopes: |
            admin
            api
            auth
            cli
            clinics
            doctors
            treatments
            reviews
            patients
            medical-specialties
            accreditation
            countries
            cities
            forms
            search
            redirects
            db
            ui
            components
            collections
            ci
            migrations
            docker
            deps
            deps-dev
            test
            seeding
          requireScope: false
          # Disallow uppercase letters at the beginning of the subject
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - uses: marocchino/sticky-pull-request-comment@v2
        if: always() && (steps.lint_pr_title.outputs.error_message != null)
        with:
          header: pr-title-lint-error
          message: |
            Pull Request titles must follow the [Conventional Commits specification](https://www.conventionalcommits.org/en/v1.0.0/) and have valid scopes.

            ${{ steps.lint_pr_title.outputs.error_message }}

            ```
            feat(clinics): add clinic search functionality
            ^    ^        ^
            |    |        |__ Subject
            |    |___________ Scope
            |________________ Type
            ```

            add a comment `/lint-pr` to re-run the checks.

      - if: ${{ steps.lint_pr_title.outputs.error_message == null }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-title-lint-error
          delete: true