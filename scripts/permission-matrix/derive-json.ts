#!/usr/bin/env tsx

import { writeFileSync } from 'node:fs'
import { join, resolve } from 'node:path'
import { fileURLToPath } from 'node:url'

import { type AccessExpectation, type MatrixRow, permissionMatrix } from '../../docs/security/permission-matrix.config'

const __dirname = fileURLToPath(new URL('.', import.meta.url))
const ROOT_DIR = resolve(__dirname, '../..')
const MATRIX_JSON_FILE = join(ROOT_DIR, 'docs/security/permission-matrix.json')
const MATRIX_MD_FILE = join(ROOT_DIR, 'docs/security/permission-matrix.generated.md')

const ACCESS_LABEL: Record<AccessExpectation['type'], string> = {
  platform: 'Platform',
  anyone: 'Anyone',
  published: 'Published (approved)',
  conditional: 'Conditional',
}

const MARKDOWN_HEADER =
  `# Permission Matrix (Generated)\n\n` +
  `> ⚠️ This file is generated by \`pnpm matrix:derive\` from \`docs/security/permission-matrix.config.ts\`.\n` +
  `> Do not edit manually. Update the configuration instead.\n`

function formatAccess(access?: AccessExpectation): string {
  if (!access) return '–'

  const label = ACCESS_LABEL[access.type]
  if (!access.details) {
    return label
  }

  const sanitizedDetails = access.details.replace(/\|/g, '\\|')
  return `${label}<br/><sub>${sanitizedDetails}</sub>`
}

function buildMarkdownTable(rows: MatrixRow[]): string {
  const hasReadVersions = rows.some((row) => row.operations.readVersions)
  const headers = ['Collection', 'Create', 'Read', 'Update', 'Delete', 'Admin']
  if (hasReadVersions) headers.push('Read&nbsp;Versions')

  const headerLine = `| ${headers.join(' | ')} |`
  const separatorLine = `| ${headers.map(() => '---').join(' | ')} |`

  const lines = rows.map((row) => {
    const cells = [
      `${row.displayName} \`(${row.slug})\``,
      formatAccess(row.operations.create),
      formatAccess(row.operations.read),
      formatAccess(row.operations.update),
      formatAccess(row.operations.delete),
      formatAccess(row.operations.admin),
    ]

    if (hasReadVersions) {
      cells.push(formatAccess(row.operations.readVersions))
    }

    return `| ${cells.join(' | ')} |`
  })

  return [headerLine, separatorLine, ...lines].join('\n')
}

function buildNotesSection(rows: MatrixRow[]): string {
  const noteLines = rows.filter((row) => Boolean(row.notes)).map((row) => `- **${row.displayName}**: ${row.notes}`)

  if (noteLines.length === 0) {
    return ''
  }

  return `\n\n## Notes\n\n${noteLines.join('\n')}`
}

async function main(): Promise<void> {
  console.log('🛠️  Generating permission matrix artifacts from config...')

  const rows = Object.values(permissionMatrix.collections)
  if (rows.length === 0) {
    console.error('❌ No collections found in permissionMatrix configuration.')
    process.exit(1)
  }

  writeFileSync(MATRIX_JSON_FILE, `${JSON.stringify(permissionMatrix, null, 2)}\n`)
  console.log(`✅ Wrote JSON snapshot to ${MATRIX_JSON_FILE}`)

  const markdownTable = buildMarkdownTable(rows)
  const markdown = `${MARKDOWN_HEADER}\n${markdownTable}${buildNotesSection(rows)}\n`
  writeFileSync(MATRIX_MD_FILE, markdown)
  console.log(`✅ Wrote generated markdown to ${MATRIX_MD_FILE}`)

  console.log('\n📋 Collections summarised:')
  for (const row of rows) {
    console.log(`   - ${row.slug} (${row.displayName})`)
  }

  console.log('\n✅ Derivation completed successfully.')
}

main().catch((error) => {
  console.error('Fatal error:', error)
  process.exit(1)
})
