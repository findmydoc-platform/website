/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    basicUsers: BasicUserAuthOperations;
    patients: PatientAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    basicUsers: BasicUser;
    patients: Patient;
    clinicStaff: ClinicStaff;
    platformStaff: PlatformStaff;
    clinics: Clinic;
    doctors: Doctor;
    accreditation: Accreditation;
    'medical-specialties': MedicalSpecialty;
    treatments: Treatment;
    clinictreatments: Clinictreatment;
    doctortreatments: Doctortreatment;
    doctorspecialties: Doctorspecialty;
    favoriteclinics: Favoriteclinic;
    reviews: Review;
    countries: Country;
    cities: City;
    tags: Tag;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    exports: Export;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    clinics: {
      treatments: 'clinictreatments';
    };
    doctors: {
      treatments: 'doctortreatments';
      specialties: 'doctorspecialties';
    };
    'medical-specialties': {
      doctorLinks: 'doctorspecialties';
    };
    treatments: {
      Clinics: 'clinictreatments';
      Doctors: 'doctortreatments';
    };
    tags: {
      posts: 'posts';
      clinics: 'clinics';
      treatments: 'treatments';
    };
  };
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    basicUsers: BasicUsersSelect<false> | BasicUsersSelect<true>;
    patients: PatientsSelect<false> | PatientsSelect<true>;
    clinicStaff: ClinicStaffSelect<false> | ClinicStaffSelect<true>;
    platformStaff: PlatformStaffSelect<false> | PlatformStaffSelect<true>;
    clinics: ClinicsSelect<false> | ClinicsSelect<true>;
    doctors: DoctorsSelect<false> | DoctorsSelect<true>;
    accreditation: AccreditationSelect<false> | AccreditationSelect<true>;
    'medical-specialties': MedicalSpecialtiesSelect<false> | MedicalSpecialtiesSelect<true>;
    treatments: TreatmentsSelect<false> | TreatmentsSelect<true>;
    clinictreatments: ClinictreatmentsSelect<false> | ClinictreatmentsSelect<true>;
    doctortreatments: DoctortreatmentsSelect<false> | DoctortreatmentsSelect<true>;
    doctorspecialties: DoctorspecialtiesSelect<false> | DoctorspecialtiesSelect<true>;
    favoriteclinics: FavoriteclinicsSelect<false> | FavoriteclinicsSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    countries: CountriesSelect<false> | CountriesSelect<true>;
    cities: CitiesSelect<false> | CitiesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    exports: ExportsSelect<false> | ExportsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user:
    | (BasicUser & {
        collection: 'basicUsers';
      })
    | (Patient & {
        collection: 'patients';
      });
  jobs: {
    tasks: {
      createCollectionExport: TaskCreateCollectionExport;
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface BasicUserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface PatientAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * Static pages such as contact or about us
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (number | null) | Media;
  };
  layout: (CallToActionBlock | ContentBlock | MediaBlock | ArchiveBlock | FormBlock | LayoutBlock | NewsletterBlock)[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Page;
  breadcrumbs?:
    | {
        doc?: (number | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  _status?: ('draft' | 'published') | null;
}
/**
 * Blog posts and news articles displayed on the site
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  /**
   * Link this post to one or more Tags
   */
  tags?: (number | Tag)[] | null;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  excerpt: string;
  relatedPosts?: (number | Post)[] | null;
  categories?: (number | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | PlatformStaff)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  _status?: ('draft' | 'published') | null;
}
/**
 * Keywords used to categorize posts, clinics and treatments
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  /**
   * Tag label shown in the UI
   */
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * Link this tag to one or more Posts
   */
  posts?: {
    docs?: (number | Post)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  /**
   * Link this tag to one or more Clinics
   */
  clinics?: {
    docs?: (number | Clinic)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  /**
   * Link this tag to one or more Treatments
   */
  treatments?: {
    docs?: (number | Treatment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * Clinic profiles with address, contact details and offered services
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clinics".
 */
export interface Clinic {
  id: number;
  /**
   * Name of the clinic
   */
  name: string;
  /**
   * Average rating based on patient reviews
   */
  averageRating?: number | null;
  /**
   * Detailed description of the clinic
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Link this clinic to one or more Tags
   */
  tags?: (number | Tag)[] | null;
  /**
   * Link this clinic to one or more Clinic Treatments
   */
  treatments?: {
    docs?: (number | Clinictreatment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  /**
   * Clinic thumbnail image
   */
  thumbnail?: (number | null) | Media;
  /**
   * Clinic address information
   */
  address: {
    /**
     * Country where the clinic is located
     */
    country: string;
    /**
     * Coordinates for Google Maps
     *
     * @minItems 2
     * @maxItems 2
     */
    coordinates?: [number, number] | null;
    /**
     * Street name
     */
    street: string;
    /**
     * House number
     */
    houseNumber: string;
    /**
     * Zip code of clinic
     */
    zipCode: number;
    /**
     * City where the clinic is located
     */
    city: number | City;
  };
  /**
   * Clinic contact information
   */
  contact: {
    /**
     * Phone number
     */
    phoneNumber: string;
    /**
     * Email address
     */
    email: string;
    /**
     * Website URL
     */
    website?: string | null;
  };
  /**
   * Accreditations held by this clinic
   */
  accreditations?: (number | Accreditation)[] | null;
  /**
   * Clinic approval status - only Platform Staff can change this
   */
  status?: ('draft' | 'pending' | 'approved' | 'rejected') | null;
  /**
   * Languages supported by this clinic
   */
  supportedLanguages: (
    | 'german'
    | 'english'
    | 'french'
    | 'spanish'
    | 'italian'
    | 'turkish'
    | 'russian'
    | 'arabic'
    | 'chinese'
    | 'japanese'
    | 'korean'
    | 'portuguese'
  )[];
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * Connect clinics with the treatments they offer and the price charged
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clinictreatments".
 */
export interface Clinictreatment {
  id: number;
  /**
   * Price the clinic charges for this treatment
   */
  price: number;
  /**
   * Select the clinic providing this treatment
   */
  clinic: number | Clinic;
  /**
   * Select the treatment being offered
   */
  treatment: number | Treatment;
  updatedAt: string;
  createdAt: string;
}
/**
 * Medical treatments offered by clinics, including pricing and ratings
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "treatments".
 */
export interface Treatment {
  id: number;
  /**
   * Treatment name
   */
  name: string;
  /**
   * Link this treatment to one or more Tags
   */
  tags?: (number | Tag)[] | null;
  /**
   * Detailed explanation of the treatment
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Specialty this treatment belongs to
   */
  medicalSpecialty: number | MedicalSpecialty;
  /**
   * Average price of this treatment across all clinics (computed from clinic treatments)
   */
  averagePrice?: number | null;
  /**
   * Average rating of this treatment
   */
  averageRating?: number | null;
  /**
   * Link this clinic to one or more Clinic Treatments
   */
  Clinics?: {
    docs?: (number | Clinictreatment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  /**
   * Link this treatment to one or more Doctors with their specialization level.
   */
  Doctors?: {
    docs?: (number | Doctortreatment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * Medical fields and areas of specialization. Organize healthcare services by specialty to help patients find the right type of care for their needs.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "medical-specialties".
 */
export interface MedicalSpecialty {
  id: number;
  /**
   * Name of the medical specialty
   */
  name: string;
  /**
   * Short explanation of this specialty
   */
  description?: string | null;
  /**
   * Icon representing this specialty
   */
  icon?: (number | null) | Media;
  /**
   * Parent medical specialty (if any)
   */
  parentSpecialty?: (number | null) | MedicalSpecialty;
  /**
   * Doctors associated with this specialty, their specialization level, and certifications.
   */
  doctorLinks?: {
    docs?: (number | Doctorspecialty)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * Images and other files uploaded for use on the website
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for screen readers
   */
  alt?: string | null;
  /**
   * Optional caption displayed with the media
   */
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Connects doctors with their medical specialties and records their level of expertise
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "doctorspecialties".
 */
export interface Doctorspecialty {
  id: number;
  /**
   * Link to the doctor.
   */
  doctor: number | Doctor;
  /**
   * Link to the medical specialty.
   */
  medicalSpecialty: number | MedicalSpecialty;
  /**
   * Level of expertise the doctor has in this specialty
   */
  specializationLevel: 'beginner' | 'intermediate' | 'advanced' | 'expert' | 'specialist';
  /**
   * List of certifications related to this specialty for the doctor.
   */
  certifications?:
    | {
        certification?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Doctor profiles including experience, languages and specialties
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "doctors".
 */
export interface Doctor {
  id: number;
  title?: ('dr' | 'specialist' | 'surgeon' | 'assoc_prof' | 'prof_dr') | null;
  firstName: string;
  lastName: string;
  /**
   * Full name combined from the title and names above
   */
  fullName: string;
  biography?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  profileImage?: (number | null) | Media;
  /**
   * The clinic where this doctor primarily works
   */
  clinic: number | Clinic;
  /**
   * Qualifications of this doctor such as MD, PhD, etc.
   */
  qualifications: string[];
  experienceYears?: number | null;
  /**
   * Languages spoken by this doctor
   */
  languages: (
    | 'german'
    | 'english'
    | 'french'
    | 'spanish'
    | 'italian'
    | 'turkish'
    | 'russian'
    | 'arabic'
    | 'chinese'
    | 'japanese'
    | 'korean'
    | 'portuguese'
  )[];
  /**
   * Average rating of this doctor
   */
  averageRating?: number | null;
  /**
   * Link this doctor to one or more Treatments with their specialization level.
   */
  treatments?: {
    docs?: (number | Doctortreatment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  /**
   * Link this doctor to one or more Medical Specialties with their specialization level and certifications.
   */
  specialties?: {
    docs?: (number | Doctorspecialty)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * Assign treatments to doctors and track their expertise level
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "doctortreatments".
 */
export interface Doctortreatment {
  id: number;
  /**
   * Link to the doctor.
   */
  doctor: number | Doctor;
  /**
   * Link to the treatment.
   */
  treatment: number | Treatment;
  /**
   * Doctor's expertise level for this treatment
   */
  specializationLevel: 'general_practice' | 'specialist' | 'sub_specialist';
  /**
   * Number of times this doctor has performed the treatment
   */
  treatmentsPerformed?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Cities available when entering clinic addresses
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities".
 */
export interface City {
  id: number;
  /**
   * Name of the city
   */
  name: string;
  /**
   * IATA airport code for the city
   */
  airportcode: string;
  /**
   * Coordinates of the city
   *
   * @minItems 2
   * @maxItems 2
   */
  coordinates: [number, number];
  /**
   * Country this city belongs to
   */
  country: number | Country;
  updatedAt: string;
  createdAt: string;
}
/**
 * Countries used throughout the platform for addresses and pricing
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countries".
 */
export interface Country {
  id: number;
  /**
   * Full country name
   */
  name: string;
  /**
   * Two-letter ISO country code
   */
  isoCode: string;
  /**
   * Primary language spoken
   */
  language: string;
  /**
   * Local currency code
   */
  currency: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * Certifications that clinics can hold to prove quality standards
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accreditation".
 */
export interface Accreditation {
  id: number;
  name: string;
  abbreviation: string;
  /**
   * Country issuing this accreditation
   */
  country: string;
  /**
   * Details about what this accreditation covers
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  icon?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * Post categories for organising blog content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  /**
   * Category title displayed in the blog
   */
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Staff members who manage the platform or provide customer support
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platformStaff".
 */
export interface PlatformStaff {
  id: number;
  firstName: string;
  lastName: string;
  user: number | BasicUser;
  role: 'admin' | 'support' | 'content-manager';
  profileImage?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * Accounts for clinic and platform staff to sign in to the admin panel
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "basicUsers".
 */
export interface BasicUser {
  id: number;
  email: string;
  supabaseUserId: string;
  /**
   * Defines whether the staff member works for a clinic or the platform
   */
  userType: 'clinic' | 'platform';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Optionales Bild für diese Spalte. Alt-Text wird aus der Media-Collection übernommen.
         */
        image?: (number | null) | Media;
        imagePosition?: ('top' | 'left' | 'right' | 'bottom') | null;
        imageSize?: ('content' | 'wide' | 'full') | null;
        caption?: string | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LayoutBlock".
 */
export interface LayoutBlock {
  background: 'primary' | 'secondary' | 'accent' | 'accent-2';
  width: 'full' | 'two-thirds' | 'half' | 'third';
  accent: 'none' | 'left' | 'right';
  content?: (MediaBlock | FormBlock | ContentBlock)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'layout-block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsletterBlock".
 */
export interface NewsletterBlock {
  fullWidth?: boolean | null;
  background: 'primary' | 'secondary' | 'accent' | 'accent-2';
  textcolor: 'primary' | 'secondary' | 'accent' | 'accent-2';
  text: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  form: number | Form;
  id?: string | null;
  blockName?: string | null;
  blockType: 'newsletter-block';
}
/**
 * Profiles of patients for appointments and reviews. Only staff can view them here.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "patients".
 */
export interface Patient {
  id: number;
  email: string;
  supabaseUserId: string;
  firstName: string;
  lastName: string;
  /**
   * Patient's birth date
   */
  dateOfBirth?: string | null;
  /**
   * Patient's gender identity
   */
  gender?: ('male' | 'female' | 'other' | 'not_specified') | null;
  /**
   * Contact phone number
   */
  phoneNumber?: string | null;
  /**
   * Residential address
   */
  address?: string | null;
  /**
   * Country of residence
   */
  country?: (number | null) | Country;
  /**
   * Preferred language for communication
   */
  language?: ('en' | 'de' | 'fr' | 'es' | 'ar' | 'ru' | 'zh') | null;
  /**
   * Optional profile picture
   */
  profileImage?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * Profiles for staff working at a clinic who handle day-to-day operations and patient care
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clinicStaff".
 */
export interface ClinicStaff {
  id: number;
  /**
   * Select the login account linked to this staff member
   */
  user: number | BasicUser;
  /**
   * The clinic this staff member belongs to
   */
  clinic?: (number | null) | Clinic;
  firstName: string;
  lastName: string;
  /**
   * Optional email address for contacting this staff member
   */
  email?: string | null;
  /**
   * Staff approval status - only Platform Staff can change this
   */
  status?: ('pending' | 'approved' | 'rejected') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Bookmarks that let patients save clinics they like
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "favoriteclinics".
 */
export interface Favoriteclinic {
  id: number;
  /**
   * Link to the patient.
   */
  patient: number | Patient;
  /**
   * Link to the clinic.
   */
  clinic: number | Clinic;
  updatedAt: string;
  createdAt: string;
}
/**
 * Feedback from patients about clinics, doctors and treatments
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: number;
  /**
   * Date the review was written (set automatically on create)
   */
  reviewDate: string;
  /**
   * Patient who wrote this review (PlatformStaff with role user)
   */
  patient: number | PlatformStaff;
  /**
   * Review status
   */
  status: 'pending' | 'approved' | 'rejected';
  /**
   * Star rating from 1 to 5
   */
  starRating: number;
  /**
   * Review text/comments
   */
  comment: string;
  /**
   * Clinic being reviewed (required)
   */
  clinic: number | Clinic;
  /**
   * Doctor being reviewed (required)
   */
  doctor: number | Doctor;
  /**
   * Treatment being reviewed (required)
   */
  treatment: number | Treatment;
  /**
   * Timestamp of last review modification
   */
  lastEditedAt?: string | null;
  /**
   * Platform Staff member who last edited this review
   */
  editedBy?: (number | null) | BasicUser;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exports".
 */
export interface Export {
  id: number;
  name?: string | null;
  format?: ('csv' | 'json') | null;
  limit?: number | null;
  sort?: string | null;
  drafts?: ('yes' | 'no') | null;
  selectionToUse?: ('currentSelection' | 'currentFilters' | 'all') | null;
  fields?: string[] | null;
  collectionSlug: string;
  where?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'createCollectionExport' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'createCollectionExport' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'basicUsers';
        value: number | BasicUser;
      } | null)
    | ({
        relationTo: 'patients';
        value: number | Patient;
      } | null)
    | ({
        relationTo: 'clinicStaff';
        value: number | ClinicStaff;
      } | null)
    | ({
        relationTo: 'platformStaff';
        value: number | PlatformStaff;
      } | null)
    | ({
        relationTo: 'clinics';
        value: number | Clinic;
      } | null)
    | ({
        relationTo: 'doctors';
        value: number | Doctor;
      } | null)
    | ({
        relationTo: 'accreditation';
        value: number | Accreditation;
      } | null)
    | ({
        relationTo: 'medical-specialties';
        value: number | MedicalSpecialty;
      } | null)
    | ({
        relationTo: 'treatments';
        value: number | Treatment;
      } | null)
    | ({
        relationTo: 'clinictreatments';
        value: number | Clinictreatment;
      } | null)
    | ({
        relationTo: 'doctortreatments';
        value: number | Doctortreatment;
      } | null)
    | ({
        relationTo: 'doctorspecialties';
        value: number | Doctorspecialty;
      } | null)
    | ({
        relationTo: 'favoriteclinics';
        value: number | Favoriteclinic;
      } | null)
    | ({
        relationTo: 'reviews';
        value: number | Review;
      } | null)
    | ({
        relationTo: 'countries';
        value: number | Country;
      } | null)
    | ({
        relationTo: 'cities';
        value: number | City;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'exports';
        value: number | Export;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'basicUsers';
        value: number | BasicUser;
      }
    | {
        relationTo: 'patients';
        value: number | Patient;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'basicUsers';
        value: number | BasicUser;
      }
    | {
        relationTo: 'patients';
        value: number | Patient;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        'layout-block'?: T | LayoutBlockSelect<T>;
        'newsletter-block'?: T | NewsletterBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        image?: T;
        imagePosition?: T;
        imageSize?: T;
        caption?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LayoutBlock_select".
 */
export interface LayoutBlockSelect<T extends boolean = true> {
  background?: T;
  width?: T;
  accent?: T;
  content?:
    | T
    | {
        mediaBlock?: T | MediaBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsletterBlock_select".
 */
export interface NewsletterBlockSelect<T extends boolean = true> {
  fullWidth?: T;
  background?: T;
  textcolor?: T;
  text?: T;
  form?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  tags?: T;
  heroImage?: T;
  content?: T;
  excerpt?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "basicUsers_select".
 */
export interface BasicUsersSelect<T extends boolean = true> {
  email?: T;
  supabaseUserId?: T;
  userType?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "patients_select".
 */
export interface PatientsSelect<T extends boolean = true> {
  email?: T;
  supabaseUserId?: T;
  firstName?: T;
  lastName?: T;
  dateOfBirth?: T;
  gender?: T;
  phoneNumber?: T;
  address?: T;
  country?: T;
  language?: T;
  profileImage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clinicStaff_select".
 */
export interface ClinicStaffSelect<T extends boolean = true> {
  user?: T;
  clinic?: T;
  firstName?: T;
  lastName?: T;
  email?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platformStaff_select".
 */
export interface PlatformStaffSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  user?: T;
  role?: T;
  profileImage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clinics_select".
 */
export interface ClinicsSelect<T extends boolean = true> {
  name?: T;
  averageRating?: T;
  description?: T;
  tags?: T;
  treatments?: T;
  thumbnail?: T;
  address?:
    | T
    | {
        country?: T;
        coordinates?: T;
        street?: T;
        houseNumber?: T;
        zipCode?: T;
        city?: T;
      };
  contact?:
    | T
    | {
        phoneNumber?: T;
        email?: T;
        website?: T;
      };
  accreditations?: T;
  status?: T;
  supportedLanguages?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "doctors_select".
 */
export interface DoctorsSelect<T extends boolean = true> {
  title?: T;
  firstName?: T;
  lastName?: T;
  fullName?: T;
  biography?: T;
  profileImage?: T;
  clinic?: T;
  qualifications?: T;
  experienceYears?: T;
  languages?: T;
  averageRating?: T;
  treatments?: T;
  specialties?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accreditation_select".
 */
export interface AccreditationSelect<T extends boolean = true> {
  name?: T;
  abbreviation?: T;
  country?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "medical-specialties_select".
 */
export interface MedicalSpecialtiesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  icon?: T;
  parentSpecialty?: T;
  doctorLinks?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "treatments_select".
 */
export interface TreatmentsSelect<T extends boolean = true> {
  name?: T;
  tags?: T;
  description?: T;
  medicalSpecialty?: T;
  averagePrice?: T;
  averageRating?: T;
  Clinics?: T;
  Doctors?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clinictreatments_select".
 */
export interface ClinictreatmentsSelect<T extends boolean = true> {
  price?: T;
  clinic?: T;
  treatment?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "doctortreatments_select".
 */
export interface DoctortreatmentsSelect<T extends boolean = true> {
  doctor?: T;
  treatment?: T;
  specializationLevel?: T;
  treatmentsPerformed?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "doctorspecialties_select".
 */
export interface DoctorspecialtiesSelect<T extends boolean = true> {
  doctor?: T;
  medicalSpecialty?: T;
  specializationLevel?: T;
  certifications?:
    | T
    | {
        certification?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "favoriteclinics_select".
 */
export interface FavoriteclinicsSelect<T extends boolean = true> {
  patient?: T;
  clinic?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  reviewDate?: T;
  patient?: T;
  status?: T;
  starRating?: T;
  comment?: T;
  clinic?: T;
  doctor?: T;
  treatment?: T;
  lastEditedAt?: T;
  editedBy?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countries_select".
 */
export interface CountriesSelect<T extends boolean = true> {
  name?: T;
  isoCode?: T;
  language?: T;
  currency?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities_select".
 */
export interface CitiesSelect<T extends boolean = true> {
  name?: T;
  airportcode?: T;
  coordinates?: T;
  country?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  posts?: T;
  clinics?: T;
  treatments?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exports_select".
 */
export interface ExportsSelect<T extends boolean = true> {
  name?: T;
  format?: T;
  limit?: T;
  sort?: T;
  drafts?: T;
  selectionToUse?: T;
  fields?: T;
  collectionSlug?: T;
  where?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreateCollectionExport".
 */
export interface TaskCreateCollectionExport {
  input: {
    name?: string | null;
    format?: ('csv' | 'json') | null;
    limit?: number | null;
    sort?: string | null;
    drafts?: ('yes' | 'no') | null;
    selectionToUse?: ('currentSelection' | 'currentFilters' | 'all') | null;
    fields?: string[] | null;
    collectionSlug: string;
    where?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    user?: string | null;
    userCollection?: string | null;
    exportsCollection?: string | null;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    global?: string | null;
    user?: (number | null) | BasicUser;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}