name: CI & CD

permissions:
  contents: read

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '!**/.github/workflows/**'
      - '**/.github/dependabot.yml'
      - '**/*.md'
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      reset_database:
        description: 'Reset database before migrations'
        required: false
        default: 'false'
        type: choice
        options: [ 'true', 'false' ]

env:
  NODE_VERSION: 22
  PNPM_VERSION: 10.9.0
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  DB_FRESH: ${{ github.event.inputs.reset_database == 'true' }}

defaults:
  run:
    shell: bash

jobs:
  ci:
    name: ✅ Check, Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore pnpm store cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Check migrations
        run: |
          if git diff --quiet origin/main HEAD -- src/migrations/; then
            echo "No migrations changed."
          else
            echo "🚨 Migration scripts changed!"
            exit 1
          fi

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

  build:
    name: 🔨 Build & Archive
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore pnpm store cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@canary

      - name: Pull env-vars (Preview vs. Prod)
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then

            vercel env pull .env --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel env pull .env --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: Next.js Build
        run: pnpm build

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vercel-artifacts
          path: |
            .vercel/
            .next/
          retention-days: 7
          include-hidden-files: true

  Deploy-Preview:
    name: Deploy Vercel preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: Preview
      url: ${{ steps.vercel_preview.outputs.url }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@canary

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: vercel-artifacts
          path: ./

      - name: List downloaded artifacts
        run: |
          echo "📊 Directory sizes:"
          du -h -d 2 ./
          echo "🔍 Vercel output directory structure:"
          find ./ -type f -not -path "*/node_modules/*" | sort

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Preview)
        id: vercel_preview
        run: |
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --output=json > prod.json
          # URL extrahieren und als Schritt-Output setzen:
          echo "url=$(jq -r '.url' prod.json)" >> $GITHUB_OUTPUT
