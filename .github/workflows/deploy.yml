name: CI & CD

permissions:
  contents: read

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '!**/.github/workflows/**'
      - '**/.github/dependabot.yml'
      - '**/*.md'
      - '**/.github/instructions/**'
      - '**/.github/prompts/**'
      - '**/copilot-instructions.md'
      - '**/.vscode/settings.json'
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      reset_database:
        description: 'Reset database before migrations'
        required: false
        default: 'false'
        type: choice
        options: [ 'true', 'false' ]

env:
  NODE_VERSION: 22
  PNPM_VERSION: 10.10.0
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  DB_FRESH: ${{ github.event.inputs.reset_database == 'true' }}
  NEXT_TELEMETRY_DISABLED: 1

defaults:
  run:
    shell: bash

jobs:
  ci:
    name: âœ… Check, Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore pnpm store cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Check migrations
        run: |
          if git diff --quiet origin/main HEAD -- src/migrations/; then
            echo "No migrations changed."
          else
            echo "ðŸš¨ Migration scripts changed!"
          fi

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

  build:
    name: ðŸ”¨ Build Application
    needs: ci
    runs-on: ubuntu-latest
    env:
      PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
      CRON_SECRET: ${{ secrets.CRON_SECRET }}
      PREVIEW_SECRET: ${{ secrets.PREVIEW_SECRET }}
      DATABASE_URI: postgresql://postgres:password@localhost:5432/findmydoc-portal
    services:
      postgres:
        image: postgis/postgis:15-3.3
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: findmydoc-portal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore pnpm store cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Install PostgreSQL client (for pg_isready in runner)
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL service
        run: |
          echo "Waiting for PostgreSQL to be ready on localhost:5432..."
          for i in {1..30}; do
            if nc -z localhost 5432 && pg_isready -h localhost -p 5432 -U postgres -q; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i: PostgreSQL not yet ready. Waiting 2 seconds..."
            sleep 2
          done
          echo "Error: PostgreSQL did not become ready in time."
          exit 1

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          pnpm run migrate

      - name: Build application (static check)
        run: pnpm build

  Deploy-Preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: Preview
      url: ${{ steps.vercel_preview.outputs.deploymentUrl }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@canary

      - name: Pull Vercel Environment Variables for Preview
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Preview)
        id: vercel_preview
        run: |
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} >deployment-url.txt 2>error.txt

          # check the exit code
          code=$?
          if [ $code -eq 0 ]; then
              # Now you can use the deployment url from stdout for the next step of your workflow
              deploymentUrl=$(cat deployment-url.txt)
              echo "deploymentUrl=$deploymentUrl" >> "$GITHUB_OUTPUT"
          else
              # Handle the error
              errorMessage=$(cat error.txt)
              echo "There was an error: $errorMessage"
          fi

  Deploy-Production:
    name: Deploy Production
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: Production
      url: ${{ steps.vercel_production.outputs.deploymentUrl }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@canary

      - name: Pull Vercel Environment Variables for Production
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Production)
        id: vercel_production
        run: |
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} >deployment-url.txt 2>error.txt

          # check the exit code
          code=$?
          if [ $code -eq 0 ]; then
              # Now you can use the deployment url from stdout for the next step of your workflow
              deploymentUrl=$(cat deployment-url.txt)
              echo "deploymentUrl=$deploymentUrl" >> "$GITHUB_OUTPUT"
          else
              # Handle the error
              errorMessage=$(cat error.txt)
              echo "There was an error: $errorMessage"
          fi

  Create-Release:
    name: Create Release
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: Deploy-Production
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate semantic version number
        id: version
        run: |
          # Get the latest release tag, default to v0.0.0 if no releases exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers from tag (remove 'v' prefix)
          CURRENT_VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          echo "Current version: $MAJOR.$MINOR.$PATCH"
          
          # Get commits since the last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # If no previous tags, get all commits
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            # Get commits since the last tag
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s" --no-merges)
          fi
          
          echo "Analyzing commits for version bump..."
          
          # Initialize bump type
          BUMP_TYPE="patch"  # Default to patch
          
          # Check for breaking changes (major bump)
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!" || echo "$COMMITS" | grep -qE "^[a-zA-Z]+(\([^)]*\))?!:"; then
            BUMP_TYPE="major"
            echo "Found breaking changes - major bump"
          # Check for new features (minor bump)
          elif echo "$COMMITS" | grep -qE "^feat(\([^)]*\))?:"; then
            BUMP_TYPE="minor"
            echo "Found new features - minor bump"
          # Check for any changes that warrant a patch (fixes, chores, etc.)
          elif echo "$COMMITS" | grep -qE "^(fix|chore|build|docs|style|refactor|perf|test)(\([^)]*\))?:"; then
            BUMP_TYPE="patch"
            echo "Found fixes/improvements - patch bump"
          else
            echo "No conventional commits found, defaulting to patch bump"
          fi
          
          # Calculate new version based on bump type
          case $BUMP_TYPE in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            minor)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            patch)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          # Create new version
          NEW_VERSION="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
          echo "Generated semantic version: $NEW_VERSION (${BUMP_TYPE} bump)"

      - name: Create Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const bumpType = '${{ steps.version.outputs.bump_type }}';
            
            try {
              // Get the previous release to determine the commit range for release notes
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 10
              });
              
              let previousTag = null;
              if (releases.data.length > 0) {
                // Find the latest release that's not a draft
                previousTag = releases.data.find(release => !release.draft)?.tag_name;
              }
              
              // Generate release notes automatically
              let generatedNotes = '';
              if (previousTag) {
                try {
                  const releaseNotes = await github.rest.repos.generateReleaseNotes({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: version,
                    previous_tag_name: previousTag
                  });
                  generatedNotes = releaseNotes.data.body;
                } catch (notesError) {
                  console.log('Could not generate automatic release notes, using fallback');
                  generatedNotes = `## What's Changed\n\nPlease see the commit history for details of changes included in this release.`;
                }
              } else {
                generatedNotes = `## What's Changed\n\nThis is the first release. Please see the commit history for details.`;
              }
              
              // Add deployment information to the generated notes
              const deploymentInfo = `\n\n---\n\nðŸš€ **Deployment Information**\n- **Version:** ${version} (${bumpType} release)\n- **Commit:** ${context.sha}\n- **Deployed at:** ${new Date().toISOString()}\n\nThis release was automatically created after successful production deployment.`;
              
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: version,
                name: `Release ${version}`,
                body: generatedNotes + deploymentInfo,
                draft: false,
                prerelease: false,
                generate_release_notes: false // We handle it manually above for better control
              });
              
              console.log(`Created release: ${release.data.html_url}`);
            } catch (error) {
              console.error('Failed to create release:', error);
              throw error;
            }
