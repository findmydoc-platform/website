name: Post-Release Issue Commenter

on:
  release:
    types: [published]

permissions:
  issues: write
  contents: read

jobs:
  comment-on-issues:
    name: Comment on Closed Issues
    runs-on: ubuntu-latest
    steps:
      - name: Comment on issues included in release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseTag = context.payload.release.tag_name;
            const releaseUrl = context.payload.release.html_url;
            const releaseDate = new Date(context.payload.release.published_at);
            
            console.log(`Processing release: ${releaseTag}`);
            console.log(`Release URL: ${releaseUrl}`);
            
            // Get the previous release to determine the time range
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            
            let previousReleaseDate = null;
            const currentReleaseIndex = releases.data.findIndex(release => release.tag_name === releaseTag);
            
            if (currentReleaseIndex > -1 && currentReleaseIndex < releases.data.length - 1) {
              previousReleaseDate = new Date(releases.data[currentReleaseIndex + 1].published_at);
              console.log(`Previous release date: ${previousReleaseDate}`);
            } else {
              // If no previous release, look for issues closed in the last 30 days
              previousReleaseDate = new Date(releaseDate.getTime() - (30 * 24 * 60 * 60 * 1000));
              console.log(`No previous release found, using 30 days ago: ${previousReleaseDate}`);
            }
            
            // Find issues closed since the previous release
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              since: previousReleaseDate.toISOString(),
              per_page: 100
            });
            
            console.log(`Found ${issues.data.length} closed issues since ${previousReleaseDate}`);
            
            const closedIssues = issues.data.filter(issue => {
              // Filter out pull requests and issues closed before the previous release
              const closedAt = new Date(issue.closed_at);
              return !issue.pull_request && 
                     issue.closed_at && 
                     closedAt >= previousReleaseDate && 
                     closedAt <= releaseDate;
            });
            
            console.log(`Found ${closedIssues.length} issues to comment on`);
            
            // Comment on each eligible issue
            for (const issue of closedIssues) {
              try {
                const comment = `ðŸš€ This is included in version [${releaseTag}](${releaseUrl})`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: comment
                });
                
                console.log(`Commented on issue #${issue.number}: ${issue.title}`);
              } catch (error) {
                console.error(`Failed to comment on issue #${issue.number}:`, error);
              }
            }
            
            console.log(`Finished processing ${closedIssues.length} issues for release ${releaseTag}`);