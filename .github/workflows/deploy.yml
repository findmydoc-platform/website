name: CI & CD

permissions:
  contents: read

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '!**/.github/workflows/**'
      - '**/.github/dependabot.yml'
      - '**/*.md'
      - '**/.github/instructions/**'
      - '**/.github/prompts/**'
      - '**/copilot-instructions.md'
      - '**/.vscode/settings.json'
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      reset_database:
        description: 'Reset database before migrations'
        required: false
        default: 'false'
        type: choice
        options: [ 'true', 'false' ]

env:
  NODE_VERSION: 22
  PNPM_VERSION: 10.12.3
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  DB_FRESH: ${{ github.event.inputs.reset_database == 'true' }}
  NEXT_TELEMETRY_DISABLED: 1

defaults:
  run:
    shell: bash

jobs:
  ci:
    name: âœ… Check & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore pnpm store cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Check migrations
        run: |
          if git diff --quiet origin/main HEAD -- src/migrations/; then
            echo "No migrations changed."
          else
            echo "ðŸš¨ Migration scripts changed!"
          fi

      - name: Lint
        run: pnpm lint
      
      - name: Run unit tests
        run: pnpm test --project=unit --coverage.enabled true

      - name: Publish coverage summary
        if: always() 
        uses: davelosert/vitest-coverage-report-action@v2

  build:
    name: ðŸ”¨ Build
    needs: ci
    runs-on: ubuntu-latest
    env:
      PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
      CRON_SECRET: ${{ secrets.CRON_SECRET }}
      PREVIEW_SECRET: ${{ secrets.PREVIEW_SECRET }}
      DATABASE_URI: postgresql://postgres:password@localhost:5432/findmydoc-portal
    services:
      postgres:
        image: postgis/postgis:15-3.3
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: findmydoc-portal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore pnpm store cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Wait for PostgreSQL service
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          echo "Waiting for PostgreSQL to be ready on localhost:5432..."
          for i in {1..30}; do
            if nc -z localhost 5432 && pg_isready -h localhost -p 5432 -U postgres -q; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i: PostgreSQL not yet ready. Waiting 2 seconds..."
            sleep 2
          done
          echo "Error: PostgreSQL did not become ready in time."
          exit 1

      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          pnpm run migrate

      - name: Build application (static check)
        run: pnpm build

      - name: Run integration tests
        run: pnpm test --project=integration --coverage.enabled true

      - name: Publish coverage summary
        if: always() 
        uses:  davelosert/vitest-coverage-report-action@v2


  Deploy-Preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: Preview
      url: ${{ steps.vercel_preview.outputs.deploymentUrl }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@canary

      - name: Pull Vercel Environment Variables for Preview
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Preview)
        id: vercel_preview
        run: |
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} >deployment-url.txt 2>error.txt

          code=$?
          if [ $code -eq 0 ]; then
              deploymentUrl=$(cat deployment-url.txt)
              echo "deploymentUrl=$deploymentUrl" >> "$GITHUB_OUTPUT"
          else
              echo "There was an error during Vercel deployment:"
              cat error.txt
              exit $code
          fi

  Deploy-Production:
    name: Deploy Production
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: Production
      url: ${{ steps.vercel_production.outputs.deploymentUrl }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@canary

      - name: Pull Vercel Environment Variables for Production
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Production)
        id: vercel_production
        run: |
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} >deployment-url.txt 2>error.txt

          # check the exit code
          code=$?
          if [ $code -eq 0 ]; then
              # Now you can use the deployment url from stdout for the next step of your workflow
              deploymentUrl=$(cat deployment-url.txt)
              echo "deploymentUrl=$deploymentUrl" >> "$GITHUB_OUTPUT"
          else
              # Handle the error
              errorMessage=$(cat error.txt)
              echo "There was an error: $errorMessage"
          fi

  Create-Release:
    name: Create Release
    #if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    if: always()
    runs-on: ubuntu-latest
    needs: Deploy-Preview
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate semantic version number
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:|!:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          search_commit_body: true
          user_format_type: "csv"

      - name: Get timestamp
        id: date
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create_release
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
